/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package TCPThread;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.PrintStream;
import java.net.Socket;
import java.util.Scanner;
import javax.swing.JFrame;
import javax.swing.JOptionPane;

/**
 *
 * @author felipesoares
 */
public class Client extends javax.swing.JFrame {

    
    private JFrame frame;
    private Socket socket = null;
    private int x = 0;
    public static void main(String[] argv){ new Client();}

    
    /**
     * Creates new form Client
     */
    public Client() {
        initComponents();
        
        ipTextField.setText("localhost");
        portaTextField.setText("20000");
        
        this.CriaJanela();

        
        connectBtn.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                connectActionPerformed(e);
            }
        });
        
        disconnectBtn.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                try{
                    socket.close();
                    System.out.println("Server desconectado");
                    socket = null;
                    JOptionPane.showMessageDialog(frame, "Conexão fechada com sucesso!");
                } catch(Exception ex){
                    
                }
            }
        });
        
        mensagemBtn.addActionListener(new ActionListener(){
            @Override
            public void actionPerformed(ActionEvent e) {
                mensagemActionPerformed(e);
            }
            
        });
        
    }
    
    public void connectActionPerformed(ActionEvent e) {
        try {
            if(socket != null) {
                respostaTextArea.setText(respostaTextArea.getText()+"\nServer já está conectado!");
                return;
            }
            socket = new Socket(ipTextField.getText(), Integer.parseInt(portaTextField.getText()));
            if(socket.isConnected())
                respostaTextArea.setText(respostaTextArea.getText()+"\nServer conectado com sucesso!");
        } catch (IOException ex) {
            ex.printStackTrace();
        }
    }

    public void mensagemActionPerformed(ActionEvent ae) {
        
        try{
//            DataInputStream inbound = new DataInputStream(socket.getInputStream());
//            DataOutputStream outbound = new DataOutputStream(socket.getOutputStream());            
//        
//            outbound.writeChar('i');
//            outbound.writeChar('n');
            if(socket.isClosed()) {
                JOptionPane.showMessageDialog(frame, "Conexão fechada");
                return;
            }

            new PrintStream(socket.getOutputStream()).println(mensagemTextField.getText());
            x++;
            
            System.out.println("Mensagem enviada");
            respostaTextArea.setText(respostaTextArea.getText()+"\nMensagem enviada com sucesso!");
            
            Scanner resposta = new Scanner(socket.getInputStream());
            String string;

            if(resposta.hasNextLine()){
                string = resposta.nextLine();
                System.out.println(string);
                respostaTextArea.setText(respostaTextArea.getText()+"\n"+string);
            }
            if(resposta.hasNextLine()){
                string = resposta.nextLine();
                System.out.println(string);
                respostaTextArea.setText(respostaTextArea.getText()+"\n"+string);
            }
//            resposta.close();
            
//            if(resposta.hasNextLine()){
//                string = resposta.nextLine();
//                System.out.println(string);
//            }

            
//            JOptionPane.showMessageDialog(jPanel, inbound.readChar());
//            JOptionPane.showMessageDialog(jPanel, inbound.readChar());
//            JOptionPane.showMessageDialog(jPanel, inbound.readChar());

        } catch(Exception e) {}

    }
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel = new javax.swing.JPanel();
        connectBtn = new javax.swing.JButton();
        disconnectBtn = new javax.swing.JButton();
        mensagemBtn = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        ipTextField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        portaTextField = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        respostaTextArea = new javax.swing.JTextArea();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        mensagemTextField = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        connectBtn.setText("connect");

        disconnectBtn.setText("disconnect");

        mensagemBtn.setText("enviar mensagem");

        jLabel1.setText("IP");

        jLabel2.setText("Porta");

        respostaTextArea.setColumns(20);
        respostaTextArea.setRows(5);
        respostaTextArea.setEnabled(false);
        jScrollPane1.setViewportView(respostaTextArea);

        jLabel3.setText("Log");

        jLabel4.setText("Mensagem a ser enviada");

        mensagemTextField.setText("Mensagem 123");

        javax.swing.GroupLayout jPanelLayout = new javax.swing.GroupLayout(jPanel);
        jPanel.setLayout(jPanelLayout);
        jPanelLayout.setHorizontalGroup(
            jPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelLayout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(jPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelLayout.createSequentialGroup()
                        .addComponent(connectBtn)
                        .addGap(18, 18, 18)
                        .addComponent(mensagemBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(disconnectBtn))
                    .addGroup(jPanelLayout.createSequentialGroup()
                        .addGroup(jPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel4)
                            .addComponent(jLabel3)
                            .addComponent(jScrollPane1)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelLayout.createSequentialGroup()
                                .addGroup(jPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(ipTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel1))
                                .addGap(18, 18, 18)
                                .addGroup(jPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2)
                                    .addComponent(portaTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(mensagemTextField))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanelLayout.setVerticalGroup(
            jPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ipTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(portaTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(mensagemTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 17, Short.MAX_VALUE)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(connectBtn)
                    .addComponent(disconnectBtn)
                    .addComponent(mensagemBtn))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    private void CriaJanela() {
        frame = new JFrame("Mensagem");
        frame.setContentPane(jPanel);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setSize(500, 400);
        frame.setLocation(frame.getToolkit().getScreenSize().width/2 - frame.getWidth(), frame.getToolkit().getScreenSize().height/2 - frame.getHeight()/2);
        frame.setVisible(true);
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton connectBtn;
    private javax.swing.JButton disconnectBtn;
    private javax.swing.JTextField ipTextField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton mensagemBtn;
    private javax.swing.JTextField mensagemTextField;
    private javax.swing.JTextField portaTextField;
    private javax.swing.JTextArea respostaTextArea;
    // End of variables declaration//GEN-END:variables
}
